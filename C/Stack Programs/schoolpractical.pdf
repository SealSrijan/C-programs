//Single Linked List
#include<stdio.h>
#include<stdlib.h>
struct node
{
	int data;
	struct node *next;
};
struct node *head=NULL, *ptr;

void insert_begin(int value)
{
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->data=value;
	temp->next=NULL;
	if (head== NULL)
	{
		head=temp;
	}
	else
	{
		temp->next=head;
		head=temp;
	}
}

void insert_pos(int value,int pos)
{
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->data=value;
	int c=1;
	ptr=head;
	while(c!=pos-1)
	{
		if(ptr->next==NULL)
		{
			printf("Your entered position is not existing.");
			return;
		}
		ptr=ptr->next;
		c++;
	}
		temp->next=ptr->next;
		ptr->next=temp;
	}

void insert_end(int value)
{
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	temp->data=value;

	if (head== NULL)
	{
		head=temp;
	}
	else
	{
		ptr=head;
		while(ptr->next != NULL)
		{
			ptr=ptr->next;
		}
		ptr->next=temp;
		temp->next=NULL;
	}
}


void delete_begin()
{
	if (head== NULL)
	{
		printf("List is Empty, Deletion is not Possible");
	}
	else
	{
		ptr=head;
		head=head->next;
		ptr->next=NULL;
		free(ptr);
	}
}

void delete_middle(int pos)
{
	if (head== NULL)
	{
		printf("List is Empty, Deletion is not Possible");
	}
	else
	{
		struct node *p; 
		ptr=head;
		int c=1;
		while(c!=pos)
		{
			if(ptr->next==NULL)
			{
				printf("Your entered position is not existing.");
				return;
			}
			p=ptr;
			ptr=ptr->next;
			c++;
		}
		p->next=ptr->next;
		free(ptr);
	}
}

void delete_end()
{
	if (head== NULL)
	{
		printf("List is Empty, Deletion is not Possible");
	}
	else
	{
		struct node *p; 
		ptr=head;
		while(ptr->next != NULL)
		{
		p=ptr;
		ptr=ptr->next;	
		}
		p->next=NULL;
		free(ptr);
	}
}

void display()
{
	if (head== NULL)
	{
		printf("List is Empty");
	}
	else
	{
		ptr=head;
		while( ptr != NULL)
		{
			printf("-> %d", ptr->data);
			ptr=ptr->next;
		}
		printf("\n");
	}
}

void main()
{
	int value,pos,ch;
	printf("1. Insert_begin \n");
	printf("2. Insert_end \n");
	printf("3. Insert_After_specified_element \n");
	printf("4. delete_begin \n");
	printf("5. delete_end \n");
	printf("6. delete_middle \n");
	printf("7. exit \n");
	
	while(1)
	{
		printf("Enter the Choice \n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				{
					printf("Enter the value");
					scanf("%d",&value);
					insert_begin(value);
					display();
					break;
				}
				case 2:
				{
					printf("Enter the value");
					scanf("%d",&value);
					insert_end(value);
					display();
					break;
				}	
				case 3:
					{
					printf("Enter the value");
					scanf("%d",&value);
					printf("State the position where would you like to insert the node.");
					scanf("%d",&pos);
					insert_pos(value,pos);
					display();
					break;
				}
				case 4:
					{
					delete_begin();
					display();
					break;
				}
				case 5:
				{
					delete_end();
					display();
					break;
				}
				case 6:
				{
					printf("Enter the position you want to delete");
					scanf("%d",&pos);
					delete_middle(pos);
					display();
					break;
				}	
				case 7:
					exit(0);
				}
		}
	}




    